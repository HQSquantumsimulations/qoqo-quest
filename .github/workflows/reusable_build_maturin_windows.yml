name: reusable_build_maturin_windows

on:
  workflow_dispatch:
    inputs:
      py_interface_folder:
        description: "Location of the py interface folder"
        required: true
        type: string
      deploy:
        description: "Determines if build python wheels should be deployed to PyPi"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      py_interface_folder:
        description: "Location of the py interface folder"
        required: true
        type: string
      deploy:
        description: "Determines if build python wheels should be deployed to PyPi"
        required: false
        default: false
        type: boolean

jobs:

  build_maturin_builds_windows:
    name: maturin_build-windows
    runs-on: 'windows-latest'
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - name: windows wheels
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          args: --find-interpreter --out wheels -m ${{inputs.py_interface_folder}}/Cargo.toml --release --locked
      - name: store artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheels

  deploy:
    if: ${{inputs.deploy}}
    needs: build_maturin_builds_windows
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: "3.11"
    - uses: actions/download-artifact@v3
      with:
        name: wheels
    - name: Publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m pip install --upgrade pip
        pip install twine
        python -m twine upload --skip-existing *